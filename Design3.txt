		           +---------------------------+
       	                   |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

Ashton Love
Joseph Mills 

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

https://github.com/ryantimwilson/Pintos-Project-3/tree/final/src 

-implementation of project 3 to give us a starting point.

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

To locate a particular frame a page first you get the hash table  of the process with thread_current()->pages and from there you can
look up a particular page. Once the page is found to see what frame if any has the page simply accessing the frame struct stored within
each of the page will give you the pointer to the particular frame that contain the pages data. 

As each frame is connected directly to the page with this variable the process of accessing the frame from a known page is fairly simple
as if the pointer exists then the frame an be found simply with accessing that pointer.

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

The scan_lock must first be acquired before a process may begin to look for a frame. The scan_lock is only released after the frame is
allocated or if no frame could be allocated to the page.  So no two pages can be looking for a frame at the same time avoiding the race
condition between the different processes trying to acquire frames.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

When choosing the next frame to evict the first we attempt to acquire the first frame of frames lock if the lock is not acquired then we
move onto the next frame and repeated the process. If a frame lock is acquired, then we check if the page in the frame has been accessed
recently if. If the page in the frame hasn’t been accessed recently then that page is evicted from the frame and the new page is put
into the frame. If the page has been accessed recently then the page is set as not accessed recently and then the next frame in frames
is selected. 

>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

By checking if the address is >= 32 below the user_esp for the current thread  then the pointer is seen as invalid and the no new page
isallocated , but f is not then a new page is allocated to the user. 32 below is chosen as the last valid pointer as it is he amount
that pushal will put on the stack which is the max amount that should be able to be added to the stack at once.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In page.h 

bool private - Allows the fie to be written bcak to a swap page if 

struct file *file  - The file that is used by the page  to either read in information or write out information to.

off_t file-offest – The  offset with the file in the page that must starts interactions with the file at.

off_t file_bytes – the amount that is read/written from the file.

In syscall.c

struct mapping  -contains all of the information about a mapping 
  {
    struct list_elem elem;     	- list element for each of the mappings
    int handle;                 - identification number of the mapping
    struct file *file;          - file connected to the mapping 
    uint8_t *base;              - starting point of the memory  mapping 
    size_t page_cnt;            - number of pages in the memory mapping 
  };


---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Within the process we keep a list of all memory mapped files. The mapping and unmapping of files is handled in the system calls sys_mmap
and sys_unmapping respectively. When mapping a file mapping struct is created and initialized with all of its fields from the file and
then added to the mappings stored in the process. The file is the allocated to pages with the number of pages allocated dependent on
length. Once all the needed pages are allocated the handle for the new mapping is returned. When unmapping the file the mapping is
removed from the list and then the page is deallocated and the file is freed. When evicting pages the dirty bit is checked and if the
pages are dirty then then the files are written out to their file unless they were flagged private all the rest of the situations just
result in the page being freed. 

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

In the page allocate function if the the page is allocate and already found within the hash table then there is an overlap. If there is
an overlap indicated by the pages presence within the hash table then the allocate function returns null to hte mapp system call which
inturn unmapps the file.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.


Much of the code is shared between the two as simply expanding the page structure to include information about the files allowed for
much the code to be shared once additional function were added to the pagdir.c file to interact with the extended struct. Much of the
code between the two situations is shared and only the areas where different handling is needed do we check for the type of situation
this cuts down on a lot of redundant nearly identical code being needed.



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
